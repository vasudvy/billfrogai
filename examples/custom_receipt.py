#!/usr/bin/env python3
"""
Custom receipt generation example.

This example shows how to customize the receipt template
and add additional data to receipts.
"""

from billfrog.receipts.generator import ReceiptGenerator
from billfrog.ai_providers.openai_provider import UsageData
from jinja2 import Template
from datetime import datetime

class CustomReceiptGenerator(ReceiptGenerator):
    """Custom receipt generator with additional features."""
    
    def __init__(self):
        super().__init__()
        # Override with custom template
        self.receipt_template = self._create_custom_template()
    
    def _create_custom_template(self) -> str:
        """Create a custom receipt template."""
        return """
<!DOCTYPE html>
<html>
<head>
    <title>Custom AI Receipt - {{ agent_name }}</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .header { 
            text-align: center; 
            padding: 40px 0; 
            border-bottom: 2px solid #fff;
            margin-bottom: 30px;
        }
        .logo { font-size: 60px; margin-bottom: 10px; }
        .company { font-size: 36px; font-weight: bold; }
        .content { background: rgba(255,255,255,0.1); padding: 30px; border-radius: 10px; }
        .stat-box { 
            display: inline-block; 
            background: rgba(255,255,255,0.2); 
            padding: 20px; 
            margin: 10px; 
            border-radius: 8px; 
            min-width: 150px;
            text-align: center;
        }
        .stat-value { font-size: 24px; font-weight: bold; }
        .stat-label { font-size: 14px; opacity: 0.8; }
        .total-cost { 
            font-size: 48px; 
            font-weight: bold; 
            text-align: center; 
            padding: 30px; 
            background: rgba(255,255,255,0.2); 
            border-radius: 10px; 
            margin: 20px 0;
        }
        .footer { 
            text-align: center; 
            padding: 20px; 
            font-size: 14px; 
            opacity: 0.8; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">üê∏</div>
        <div class="company">{{ company_name | default("Billfrog") }}</div>
        <div>Custom AI Usage Report</div>
    </div>
    
    <div class="content">
        <h2>üìä Usage Overview</h2>
        <p><strong>Agent:</strong> {{ agent_name }}</p>
        <p><strong>Period:</strong> {{ period.start }} - {{ period.end }}</p>
        <p><strong>Report Generated:</strong> {{ date_generated }}</p>
        
        <div style="margin: 30px 0;">
            <div class="stat-box">
                <div class="stat-value">{{ usage_summary.total_requests }}</div>
                <div class="stat-label">API Requests</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ usage_summary.total_tokens }}</div>
                <div class="stat-label">Total Tokens</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ models_breakdown | length }}</div>
                <div class="stat-label">Models Used</div>
            </div>
            <div class="stat-box">
                <div class="stat-value">{{ daily_usage | length }}</div>
                <div class="stat-label">Active Days</div>
            </div>
        </div>
        
        <div class="total-cost">
            üí∞ ${{ "%.2f"|format(total_cost) }}
        </div>
        
        <h3>ü§ñ Model Breakdown</h3>
        {% for model in models_breakdown %}
        <p>‚Ä¢ {{ model.name }}: {{ model.requests }} requests</p>
        {% endfor %}
        
        <h3>üìà Performance Metrics</h3>
        <p><strong>Average Cost per Request:</strong> ${{ "%.4f"|format(total_cost / (usage_summary.total_requests | int)) }}</p>
        <p><strong>Average Tokens per Request:</strong> {{ ((usage_summary.total_tokens | int) / (usage_summary.total_requests | int)) | round | int }}</p>
        <p><strong>Cost Efficiency:</strong> ${{ "%.6f"|format(total_cost / (usage_summary.total_tokens | int)) }} per token</p>
    </div>
    
    <div class="footer">
        <p>Generated by Billfrog AI Receipt System</p>
        <p>Receipt ID: {{ receipt_id }}</p>
        <p>Next report: {{ next_receipt }}</p>
    </div>
</body>
</html>
        """
    
    def generate_custom_receipt(self, agent_name: str, usage_data: UsageData, 
                              schedule: str, company_name: str = None) -> str:
        """Generate a custom receipt with additional customizations."""
        
        # Calculate period based on schedule
        period_info = self._get_period_info(schedule)
        
        # Prepare receipt data with custom fields
        receipt_data = {
            "agent_name": agent_name,
            "company_name": company_name,
            "receipt_id": self._generate_receipt_id(),
            "date_generated": datetime.now().strftime("%B %d, %Y at %I:%M %p"),
            "period": period_info,
            "usage_summary": self._format_usage_summary(usage_data),
            "cost_breakdown": self._format_cost_breakdown(usage_data),
            "daily_usage": self._format_daily_usage(usage_data.daily_breakdown),
            "models_breakdown": self._format_models_breakdown(usage_data.models_used),
            "total_cost": usage_data.total_cost_usd,
            "schedule": schedule.title(),
            "next_receipt": self._calculate_next_receipt_date(schedule)
        }
        
        # Render template
        template = Template(self.receipt_template)
        html_receipt = template.render(**receipt_data)
        
        return html_receipt


def main():
    """Example of custom receipt generation."""
    
    # Create sample usage data
    sample_usage = UsageData(
        period_start="2024-12-08T00:00:00",
        period_end="2024-12-15T23:59:59",
        total_requests=150,
        total_prompt_tokens=25000,
        total_completion_tokens=15000,
        total_tokens=40000,
        total_cost_usd=12.45,
        models_used={
            "gpt-3.5-turbo": 95,
            "gpt-4": 45,
            "text-embedding-ada-002": 10
        },
        daily_breakdown=[
            {
                "date": "2024-12-08",
                "requests": 20,
                "prompt_tokens": 3500,
                "completion_tokens": 2100,
                "cost_usd": 1.75
            },
            {
                "date": "2024-12-09", 
                "requests": 25,
                "prompt_tokens": 4200,
                "completion_tokens": 2800,
                "cost_usd": 2.30
            },
            # ... more days
        ]
    )
    
    # Generate custom receipt
    custom_generator = CustomReceiptGenerator()
    receipt_html = custom_generator.generate_custom_receipt(
        "My Custom Agent",
        sample_usage,
        "weekly",
        "Acme Corporation"
    )
    
    # Save to file
    with open("custom_receipt.html", "w") as f:
        f.write(receipt_html)
    
    print("‚úÖ Custom receipt generated: custom_receipt.html")
    print("üåê Open it in your browser to see the custom styling!")


if __name__ == "__main__":
    main()